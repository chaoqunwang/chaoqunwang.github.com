<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[文章分类：代码 | 超群的博客]]></title>
  <link href="http://wangchaoqun.com/blog/categories/dai-ma/atom.xml" rel="self"/>
  <link href="http://wangchaoqun.com/"/>
  <updated>2014-04-16T17:05:27+08:00</updated>
  <id>http://wangchaoqun.com/</id>
  <author>
    <name><![CDATA[wang chaoqun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Excel导出工具类]]></title>
    <link href="http://wangchaoqun.com/blog/2013/01/excel-dao-chu-gong-ju-lei.html/"/>
    <updated>2013-01-01T16:32:42+08:00</updated>
    <id>http://wangchaoqun.com/blog/2013/01/excel-dao-chu-gong-ju-lei</id>
    <content type="html"><![CDATA[<p>前端使用jquery easyui，datagrid添加导出按钮（另外的js逻辑）即可将当前页或所有页数据(支持查询条件的导出)导出到excel，支持office excel 2003和2007+;<br/>
使用apache poi（+ooxml）实现，主要代码片段如下：  <!--more-->
```java
package com.colalife.core.util.excel;</p>

<p>public class ExcelExportUtil {</p>

<pre><code>private static Logger logger = LoggerFactory.getLogger(ExcelExportUtil.class);
private static Map&lt;String, CellStyle&gt; styles;
/**
 * sheetName Excel导出文档里的标签页名，默认为Sheet1
 */
public static final String DEFAULT_SHEET_NAME = "Sheet1";
/**
 * excel导出时文件名，默认为"导出excel.xls"
 */
public static final String DEFAULT_EXCEL_FILE_NAME = "导出excel.xls";

/**
 * Excel导出,sheetName默认为Sheet1
 * @param dataList 数据，可用bean list
 * @param columns 字段和字段显示名的键值对
 */
public static void export(List&lt;?&gt; dataList, Map&lt;String, String&gt; columns, HttpServletResponse response)
        throws IOException {
    String[] fields = columns.keySet().toArray(new String[0]);
    String[] titles = columns.values().toArray(new String[0]);
    export(dataList, fields, titles, response);
}

/**
 * Excel导出,sheetName默认为Sheet1
 * @param dataList 数据，可用bean list
 * @param EasyuiDataGrid 用来获取fields titles 字段和字段显示名的数组
 */
public static void export(List&lt;?&gt; dataList, EasyuiDataGrid dg, HttpServletResponse response)
        throws IOException {
    String[] fields = dg.getFields().split(",");
    String[] titles = dg.getTitles().split(",");
    Workbook excel = ExcelExportUtil.getExcel(dataList, fields, titles);
    ExcelExportUtil.setResponseForExcel(response);
    excel.write(response.getOutputStream());
    response.getOutputStream().flush();
    response.getOutputStream().close();
}

/**
 * Excel导出,sheetName默认为Sheet1
 * @param dataList 数据，可用bean list
 * @param fields titles 字段和字段显示名的数组
 */
public static void export(List&lt;?&gt; dataList, String[] fields, String[] titles, HttpServletResponse response)
        throws IOException {
    Workbook excel = ExcelExportUtil.getExcel(dataList, fields, titles);
    ExcelExportUtil.setResponseForExcel(response);
    excel.write(response.getOutputStream());
    response.getOutputStream().flush();
    response.getOutputStream().close();
}

/**
 * Excel导出的实现,sheetName默认为Sheet1
 * @param data 数据，可用bean list
 * @param columns 字段和字段显示名的键值对
 */
public static Workbook getExcel(List&lt;?&gt; data, Map&lt;String, String&gt; columns) {
    return getExcel(data, DEFAULT_SHEET_NAME, columns);
}

/**
 * Excel导出的实现,sheetName默认为Sheet1
 * @param data 数据，可用bean list
 * @param columns 字段和字段显示名的键值对
 */
public static Workbook getExcel(List&lt;?&gt; data, String[] fields, String[] titles) {
    return getExcel(data, DEFAULT_SHEET_NAME, fields, titles);
}

/**
 * Excel导出的实现
 * @param data 数据，可用bean list
 * @param sheetName 导出文档里的标签页名
 * @param columns 字段和字段显示名的键值对
 */
public static Workbook getExcel(List&lt;?&gt; data, String sheetName, Map&lt;String, String&gt; columns) {
    String[] fields = columns.keySet().toArray(new String[0]);
    String[] titles = columns.values().toArray(new String[0]);
    return getExcel(data, sheetName, fields, titles);
}

/**
 * Excel导出的实现
 * @param data 数据，可用bean list
 * @param sheetName 导出文档里的标签页名
 * @param fields titles 字段和字段显示名的数组
 */
public static Workbook getExcel(List&lt;?&gt; data, String sheetName, String[] fields, String[] titles) {
    Workbook workbook = new HSSFWorkbook();
    //创建所有Cell Style
    createStyles(workbook);
    Sheet sheet = workbook.createSheet(sheetName);
    // 创建第一行,为excel表头
    Row row = sheet.createRow(0);
    // 序号列
    Cell numHeader = row.createCell(0);
    numHeader.setCellValue(new HSSFRichTextString("序号"));
    numHeader.setCellStyle(styles.get("header"));
    for (int i = 1; i &lt;= titles.length; i++) {
        Cell header = row.createCell(i);
        header.setCellValue(new HSSFRichTextString(titles[i - 1]));
        header.setCellStyle(styles.get("header"));
    }
    // 创建其他各数据行
    if (!data.isEmpty()) {
        for (int j = 0; j &lt; data.size(); j++) {
            Object bean = data.get(j);
            Row dataRow = sheet.createRow(j + 1);
            // 序号列
            Cell num = dataRow.createCell(0);
            num.setCellValue(new HSSFRichTextString(String.valueOf(j + 1)));
            num.setCellStyle(styles.get("normal"));
            for (int k = 1; k &lt;= fields.length; k++) {
                Cell cell = dataRow.createCell(k);
                Object value = null;
                boolean isDate = false;
                try {
                    value = PropertyUtils.getSimpleProperty(bean, fields[k - 1]);
                    if (value instanceof Date) {
                        value = DateUtil.formatDate((Date) value);
                        isDate = true;
                    }
                } catch (Exception e) {
                    logger.error("Excel导出，获取属性值异常：" + e.getMessage());
                }
                HSSFRichTextString cellValue = new HSSFRichTextString(ObjectUtils.toString(value));
                cell.setCellValue(cellValue);
                cell.setCellStyle(isDate ? styles.get("dateCell") : styles.get("normal"));
            }
        }
    }
    for (int i = 0; i &lt; titles.length; i++) {
        // 自适应宽度
        sheet.autoSizeColumn(i);
    }
    return workbook;
}
</code></pre>

<p><code>
标签：[技术](/blog/categories/tech)  
</code> java</p>

<pre><code>/**
 * excel导出时用到的方法，直接调用
 */
public static void setResponseForExcel(HttpServletResponse response) {
    setResponseForExcel(response, DEFAULT_EXCEL_FILE_NAME);
}

/**
 * excel导出时用到的方法，直接调用
 * @throws UnsupportedEncodingException
 */
public static void setResponseForExcel(HttpServletResponse response, String fileName) {
    response.setContentType("application/vnd.ms-excel;charset=UTF-8");
    try {
        // 解决excel文件乱码问题
        response.setHeader("Content-Disposition", "attachment;filename="
                + new String(fileName.getBytes("GB2312"), "ISO8859-1"));
    } catch (UnsupportedEncodingException e) {
        logger.error("Excel导出，转码异常：" + e.getMessage());
    }
    response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
    response.setHeader("Pragma", "public");
    response.setDateHeader("Expires", 0);
}

private static Map&lt;String, CellStyle&gt; createStyles(Workbook wb) {
    styles = Maps.newHashMap();
    DataFormat df = wb.createDataFormat();

    // --字体设定 --//

    //普通字体
    Font normalFont = wb.createFont();
    normalFont.setFontName("宋体");
    normalFont.setFontHeightInPoints((short) 12);

    //加粗字体
    Font boldFont = wb.createFont();
    boldFont.setFontHeightInPoints((short) 12);
    boldFont.setBoldweight(Font.BOLDWEIGHT_BOLD);

    //蓝色加粗字体
    Font blueBoldFont = wb.createFont();
    blueBoldFont.setFontHeightInPoints((short) 12);
    blueBoldFont.setBoldweight(Font.BOLDWEIGHT_BOLD);
    blueBoldFont.setColor(IndexedColors.BLUE.getIndex());

    // --Cell Style设定-- //
    //普通格式
    CellStyle normalStyle = wb.createCellStyle();
    normalStyle.setFont(normalFont);
    styles.put("normal", normalStyle);

    //标题格式
    CellStyle headerStyle = wb.createCellStyle();
    headerStyle.setFont(boldFont);
    // 指定单元格居中对齐
    headerStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
    // 指定单元格垂直居中对齐
    headerStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
    styles.put("header", headerStyle);

    //日期格式
    CellStyle dateCellStyle = wb.createCellStyle();
    dateCellStyle.setFont(normalFont);
    dateCellStyle.setDataFormat(df.getFormat("yyyy-MM-dd HH:mm:ss"));
</code></pre>

<p>//      setBorder(dateCellStyle);</p>

<pre><code>    styles.put("dateCell", dateCellStyle);

    //数字格式
    CellStyle numberCellStyle = wb.createCellStyle();
    numberCellStyle.setFont(normalFont);
    numberCellStyle.setDataFormat(df.getFormat("#,##0.00"));
    setBorder(numberCellStyle);
    styles.put("numberCell", numberCellStyle);

    //合计列格式
    CellStyle totalStyle = wb.createCellStyle();
    totalStyle.setFont(blueBoldFont);
    totalStyle.setWrapText(true);
    totalStyle.setAlignment(CellStyle.ALIGN_RIGHT);
    setBorder(totalStyle);
    styles.put("total", totalStyle);

    return styles;
}

private static void setBorder(CellStyle style) {
    //设置边框
    style.setBorderRight(CellStyle.BORDER_THIN);
    style.setRightBorderColor(IndexedColors.BLACK.getIndex());

    style.setBorderLeft(CellStyle.BORDER_THIN);
    style.setLeftBorderColor(IndexedColors.BLACK.getIndex());

    style.setBorderTop(CellStyle.BORDER_THIN);
    style.setTopBorderColor(IndexedColors.BLACK.getIndex());

    style.setBorderBottom(CellStyle.BORDER_THIN);
    style.setBottomBorderColor(IndexedColors.BLACK.getIndex());
}
</code></pre>

<p>}</p>

<p>```</p>

<h2>页面调用  </h2>

<p>在相应页面的toolbar里添加导出按钮，调用js function，例如：<br/>
```javascript</p>

<pre><code>function exportData() {
</code></pre>

<p>//      默认导出
//      jsUtil.doDefaultExport(&lsquo;&lt;%=request.getContextPath()%>/core/operlog/export&rsquo;, datagrid);</p>

<p>//      支持查询条件的导出</p>

<pre><code>    var inputs = $("#searchForm input").clone();
    jsUtil.doExport('&lt;%=request.getContextPath()%&gt;/core/operlog/export', datagrid, inputs);
}
</code></pre>

<p><code>
jsUtil里的js逻辑：  
</code>javascript
/<em>*
 * 提交导出form
 </em>/
jsUtil.submitExportForm = function(form) {</p>

<pre><code>form.submit();
form.remove();
</code></pre>

<p>}
/<em>*
 * 导出方法，input为其他查询条件
 </em>/
jsUtil.doExport = function(url, dg, inputs) {</p>

<pre><code>$.messager.defaults = { ok:"当前页数据", cancel:"所有页数据" };
//导出当前页的数据?导出符合条件的所有数据?
$.messager.confirm('导出', '选择导出查询结果里的：', function(isCurrent){
    var form = jsUtil.getDefaultExportForm(url, dg, isCurrent);
    if (inputs != null) {
        // 其他查询条件
        for (var i = 0; i &lt; inputs.length; i++) {
            form.append(inputs[i]);
        }
    }
    jsUtil.submitExportForm(form);
});
$.messager.defaults = { ok:"确定", cancel:"取消" };
</code></pre>

<p>}
/<em>*
 * 导出方法，无其他附加条件，按后台逻辑导出数据
 </em>/
jsUtil.doDefaultExport = function(url, dg) {</p>

<pre><code> var form = jsUtil.getDefaultExportForm(url, dg);
 jsUtil.submitExportForm(form);
</code></pre>

<p>}
/<em>*
 * 构造导出form，默认提交分页信息，列表字段和字段显示名信息
 </em>/
jsUtil.getDefaultExportForm = function(url, dg, isCurrent) {</p>

<pre><code>var form = $("&lt;form&gt;");
form.attr('style', 'display:none');
form.attr('target', '');
form.attr('method', 'post');
form.attr('action', url);
$('body').append(form);
var defaultInputs = jsUtil.getDefaultInputs(url, dg, isCurrent);
for (var i = 0; i &lt; defaultInputs.length; i++) {
    form.append(defaultInputs[i]);
}
return form;
</code></pre>

<p>}
/<em>*
 * 导出form的默认提交参数，包括分页信息，列表字段和字段显示名信息
 </em>/
jsUtil.getDefaultInputs = function(url, dg, isCurrent) {</p>

<pre><code>var inputs = [];
var page = $('&lt;input&gt;');
page.attr('type', 'hidden');
page.attr('name', 'page');
var rows = $('&lt;input&gt;');
rows.attr('type', 'hidden');
rows.attr('name', 'rows');
//导出当前页的数据?导出符合条件的所有数据?
if (isCurrent) {
    page.attr('value', dg.datagrid('options').pageNumber);
    rows.attr('value', dg.datagrid("options").pageSize);
} else {
    page.attr('value', 1);
    rows.attr('value', 2147483647);
}

var sort = $('&lt;input&gt;');
sort.attr('type', 'hidden');
sort.attr('name', 'sort');
sort.attr('value', dg.datagrid('options').sortName);

var order = $('&lt;input&gt;');
order.attr('type', 'hidden');
order.attr('name', 'order');
order.attr('value', dg.datagrid('options').sortOrder);

var fields = $('&lt;input&gt;');
fields.attr('type', 'hidden');
fields.attr('name', 'fields');
fields.attr('value', jsUtil.getFields(dg));

var titles = $('&lt;input&gt;');
titles.attr('type', 'hidden');
titles.attr('name', 'titles');
titles.attr('value', jsUtil.getTitles(dg));

inputs.push(page);
inputs.push(rows);
inputs.push(sort);
inputs.push(order);
inputs.push(fields);
inputs.push(titles);
return inputs;
</code></pre>

<p>};
/<em>*
 * 导出form的列表字段
 </em>/
jsUtil.getFields = function(dg) {</p>

<pre><code>var columns = dg.datagrid("options").columns[0];
var json = '';
if (columns) {
    for (var i = 0; i &lt; columns.length; i++) {
        var field = columns[i].field;
        var title = columns[i].title;
        var hidden = columns[i].hidden;
        if (!hidden) {
            json += field + ','
        }
    }
    if (json != '') {
        json = json.substring(0, json.length - 1);
    }
}
return json;
</code></pre>

<p>};
/<em>*
 * 导出form的列表字段显示名称
 </em>/
jsUtil.getTitles = function(dg) {</p>

<pre><code>var columns = dg.datagrid("options").columns[0];
var json = '';
if (columns) {
    for (var i = 0; i &lt; columns.length; i++) {
        var field = columns[i].field;
        var title = columns[i].title;
        var hidden = columns[i].hidden;
        if (!hidden) {
            json += title + ','
        }
    }
    if (json != '') {
        json = json.substring(0, json.length - 1);
    }
}
return json;
</code></pre>

<p>};</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Htmlparser,jsoup和httpclient解析页面并下载]]></title>
    <link href="http://wangchaoqun.com/blog/2012/12/htmlparserhe-httpclientjie-xi-ye-mian-bing-xia-zai.html/"/>
    <updated>2012-12-18T03:05:41+08:00</updated>
    <id>http://wangchaoqun.com/blog/2012/12/htmlparserhe-httpclientjie-xi-ye-mian-bing-xia-zai</id>
    <content type="html"><![CDATA[<p>如果你想抓取某个网页（如新浪、csdn之类）获取最新资讯列表，或者到某个站点下载文件、图片之类，就需要html解析例如htmlparser,jsoup之类的jar包，下载可用httpclient。如果想更高效率可以搞线程池，抓取解析线程和下载线程，类似消费者和生产者模型（此处不涉及，仅演示使用），代码如下：  <!--more-->
```java</p>

<pre><code>public static Set&lt;String&gt; digLinks(String address) throws Exception {
    Set&lt;String&gt; result = new HashSet&lt;String&gt;();
    URL url = new URL(address);
    Parser parser = new Parser((HttpURLConnection) url.openConnection());
    NodeFilter filter = new HasAttributeFilter("id", "someid");
    NodeList nodes = parser.extractAllNodesThatMatch(filter);
    Node root = nodes.elementAt(0);
    String html = root.getChildren().toHtml();
    parser = Parser.createParser(html, "utf-8");
    nodes = parser.extractAllNodesThatMatch(new TagNameFilter("li"));
    parser = Parser.createParser(html, "utf-8");
    nodes = parser.extractAllNodesThatMatch(new TagNameFilter("a"));
    add(result, nodes);
    return result;
}

private static void add(Set&lt;String&gt; result, NodeList nodes) {
    for (int i = 0; i &lt; nodes.size(); i++) {
        Node child = nodes.elementAt(i);
        if (child instanceof LinkTag) {
            LinkTag linknode = (LinkTag) child;
            String href = linknode.getLink();
            result.add(href);
        }
    }
}
</code></pre>

<p>```
标签：<a href="/blog/categories/java/">java</a></p>

<h2>httpclient 下载  </h2>

<p>```java</p>

<pre><code>/**
 * 读出文件中的url，连接下载保存
 * @param file
 */
public static void doSave(String file) {
    List&lt;String&gt; files = FileUtil.readLines(file);
    for (String url : files) {
        String fileName = StringUtils.substringAfterLast(url, "/");
        download(url, fileName);
    }
}

private static void download(String url, String fileName) {
    OutputStream out = null;
    InputStream in = null;
    HttpURLConnection connection = null;
    URL server = null;
    try {
        server = new URL(url);
        connection = (HttpURLConnection) server.openConnection();
        connection.connect();
        in = connection.getInputStream();

        File file = new File(dir + fileName);
        if (file.exists()) {
            return;
        }
        out = new FileOutputStream(file);
        int b = in.read();
        while (b != -1) {
            out.write(b);
            b = in.read();
        }
        in.close();
        out.close();
    } catch (Exception e) {
    }
}
</code></pre>

<p>```</p>

<h3>【更新】使用jsoup和4.3的httpclient（用的fluent的jar）</h3>

<p>``` java</p>

<pre><code>private static void initHttpClient() {
    int timeoutSeconds = 10;
    int poolSize = 20;
    RequestConfig config = RequestConfig.custom()
            .setSocketTimeout(timeoutSeconds * 1000)
            .setConnectTimeout(timeoutSeconds * 1000).build();
    httpClient = HttpClientBuilder.create().setMaxConnTotal(poolSize)
            .setMaxConnPerRoute(poolSize).setDefaultRequestConfig(config)
            .build();
}

/**
 * 根据URL获得所有的html信息
 */
public static String getContent(String url) {
    String content = "";
    Executor executor = Executor.newInstance(httpClient);
    try {
        HttpResponse response = executor.execute(Request.Get(url))
                .returnResponse();
        int status = response.getStatusLine().getStatusCode();
        if (status &gt;= HttpStatus.SC_BAD_REQUEST) {
            logger.error("error:" + status + ":" + url);
        } else {
            HttpEntity entity = response.getEntity();
            content = EntityUtils.toString(entity);
            logger.info("ok   :" + status + ":" + url);
        }
    } catch (Exception e) {
        logger.error(e.getMessage() + "\n" + url);
    }
    return content;
}
</code></pre>

<p>```
jsoup获取<a href="/">本博客</a>文章标题和链接</p>

<p>``` java</p>

<pre><code>    String html = getContent("http://wangchaoqun.com/blog/archives/");
    html = new String(html.getBytes("ISO-8859-1"), "UTF-8");
    if (StringUtils.isNotBlank(html)) {
        Document doc = Jsoup.parse(html);
        Elements hrefs = doc.select("div#blog-archives&gt;article&gt;h1&gt;a");
        for (Element each : hrefs) {
            titles.add(each.text());
            links.add(each.attr("href"));
        }
    }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用排序算法的java实现]]></title>
    <link href="http://wangchaoqun.com/blog/2010/08/chang-yong-pai-xu-suan-fa-de-java-shi-xian.html/"/>
    <updated>2010-08-09T13:09:09+08:00</updated>
    <id>http://wangchaoqun.com/blog/2010/08/chang-yong-pai-xu-suan-fa-de-java-shi-xian</id>
    <content type="html"><![CDATA[<p>分类 &ndash; 插入排序：直接插入排序，希尔排序
&ndash; 交换排序：冒泡排序，快速排序
&ndash; 选择排序：简单选择排序，堆排序
&ndash; 归并排序<br/>
时间复杂度：简单排序如插入、冒泡、选择是O(n²)，高级如快速、归并、堆是O(nlgn)<br/>
本类使用枚举存入各算法和接口实现，main方法打印排序后的数组<br/>
```java
/<em>*
 * 排序算法接口
 </em>/
interface Sort {</p>

<pre><code>public void sort(int[] data);
</code></pre>

<p>}</p>

<p>```</p>

<!--more-->


<p></p>

<p>```java
/<em>*
 * 排序算法枚举
 </em>/
enum Sorts {</p>

<pre><code>INSERT() {
    public void sort(int[] data) {
        new InsertSort().sort(data);
    }
},
BUBBLE() {
    public void sort(int[] data) {
        new BubbleSort().sort(data);
    }
},
SELECT() {
    public void sort(int[] data) {
        new SelectionSort().sort(data);
    }
},
SHELL() {
    public void sort(int[] data) {
        new ShellSort().sort(data);
    }
},
QUICK() {
    public void sort(int[] data) {
        new QuickSort().sort(data);
    }
},
MERGE() {
    public void sort(int[] data) {
        new MergeSort().sort(data);
    }
},
HEAP() {
    public void sort(int[] data) {
        new HeapSort().sort(data);
    }
};

public abstract void sort(int[] data);
</code></pre>

<p>}
```</p>

<p>标签：<a href="/blog/categories/suan-fa/">算法</a></p>

<p>```java
/<em>*
 * 插入排序算法
 </em>/
class InsertSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    for (int i = 1; i &lt; data.length; i++) {
        for (int j = i; j &gt; 0 &amp;&amp; data[j] &lt; data[j - 1]; j--) {
            SortUtil.swap(data, j, j - 1);
        }
    }
}
</code></pre>

<p>}</p>

<p>/<em>*
 * 冒泡排序算法
 </em>/
class BubbleSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    for (int i = 0; i &lt; data.length; i++) {
        for (int j = data.length - 1; j &gt; i; j--) {
            if (data[j] &lt; data[j - 1]) {
                SortUtil.swap(data, j, j - 1);
            }
        }
    }
}
</code></pre>

<p>}</p>

<p>/<em>*
 * 选择排序算法
 </em>/
class SelectionSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    for (int i = 0; i &lt; data.length; i++) {
        int lowIndex = i;
        for (int j = data.length - 1; j &gt; i; j--) {
            if (data[j] &lt; data[lowIndex]) {
                lowIndex = j;
            }
        }
        SortUtil.swap(data, i, lowIndex);
    }
}
</code></pre>

<p>}</p>

<p>/<em>*
 * 希尔排序算法
 </em>/
class ShellSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    for (int i = data.length / 2; i &gt; 2; i /= 2) {
        for (int j = 0; j &lt; i; j++) {
            insertSort(data, j, i);
        }
    }
    insertSort(data, 0, 1);
}

private void insertSort(int[] data, int start, int inc) {
    for (int i = start + inc; i &lt; data.length; i += inc) {
        for (int j = i; j &gt;= inc &amp;&amp; data[j] &lt; data[j - inc]; j -= inc) {
            SortUtil.swap(data, j, j - inc);
        }
    }
}
</code></pre>

<p>}</p>

<p>/<em>*
 * 快速排序算法
 </em>/
class QuickSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    quickSort(data, 0, data.length - 1);
}

private void quickSort(int[] data, int left, int right) {
    if (left &gt;= right) { return; }

    int pivot = partition(data, left, right);
    quickSort(data, left, pivot);// 对左半段排序
    quickSort(data, pivot + 1, right);// 对右半段排序

}

private int partition(int[] data, int left, int right) {
    int pivot = data[left];
    while (left &lt; right) {
        while (left &lt; right &amp;&amp; data[right] &gt; pivot) {
            right--;
        }
        if (left &lt; right) {
            SortUtil.swap(data, left, right);
        }

        while (left &lt; right &amp;&amp; data[left] &lt; pivot) {
            left++;
        }
        if (left &lt; right) {
            SortUtil.swap(data, left, right);
        }
    }
    return left;
}
</code></pre>

<p>}</p>

<p>/<em>*
 * 归并排序算法
 </em>/
class MergeSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    int[] temp = new int[data.length];
    mergeSort(data, temp, 0, data.length - 1);
}

private void mergeSort(int[] data, int[] temp, int left, int right) {
    if (left == right) { return; }
    int mid = (left + right) / 2;
    mergeSort(data, temp, left, mid);
    mergeSort(data, temp, mid + 1, right);
    for (int i = left; i &lt;= right; i++) {
        temp = Arrays.copyOf(data, data.length);
    }
    int i1 = left;
    int i2 = mid + 1;
    for (int cur = left; cur &lt;= right; cur++) {
        if (i1 == mid + 1) {
            data[cur] = temp[i2++];
        } else if (i2 &gt; right) {
            data[cur] = temp[i1++];
        } else if (temp[i1] &lt; temp[i2]) {
            data[cur] = temp[i1++];
        } else {
            data[cur] = temp[i2++];
        }
    }
}
</code></pre>

<p>}</p>

<p>/<em>*
 * 堆排序算法
 </em>/
class HeapSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    MaxHeap h = new MaxHeap();
    h.init(data);
    for (int i : data) {
        h.remove();
    }
    System.arraycopy(h.queue, 1, data, 0, data.length);
}

private static class MaxHeap {
    void init(int[] data) {
        this.queue = new int[data.length + 1];
        for (int element : data) {
            queue[++size] = element;
            fixUp(size);
        }
    }

    private int size = 0;
    private int[] queue;

    public void remove() {
        SortUtil.swap(queue, 1, size--);
        fixDown(1);
    }

    // fixdown
    private void fixDown(int k) {
        int j;
        while ((j = k &lt;&lt; 1) &lt;= size) {
            if (j &lt; size &amp;&amp; queue[j] &lt; queue[j + 1]) {
                j++;
            }
            if (queue[k] &gt; queue[j]) { // 不用交换
                break;
            }
            SortUtil.swap(queue, j, k);
            k = j;
        }
    }

    private void fixUp(int k) {
        while (k &gt; 1) {
            int j = k &gt;&gt; 1;
        if (queue[j] &gt; queue[k]) {
            break;
        }
        SortUtil.swap(queue, j, k);
        k = j;
        }
    }

}
</code></pre>

<p>}
```</p>

<p>```java
/<em>*
 * 排序算法工具类
 </em>/
class SortUtil {</p>

<pre><code>public static void swap(int[] data, int i, int j) {
    int temp = data[i];
    data[i] = data[j];
    data[j] = temp;
}

public static void print(int[] data) {
    for (int each : data) {
        System.out.print(each + " ");
    }
    System.out.println();
}
</code></pre>

<p>}</p>

<p>```</p>

<p>```java
/<em>*
 * 冒择入希快归堆：常用排序算法
 * @author wangchaoqun
 </em>/
public class SortTest {</p>

<pre><code>public static void main(String[] args) {
    int[] origin = { 2, 17, 3, 1, 10, 4, 8, 5, 21, 6, 33, 9, 53 };
    System.out.print("origin:   ");
    SortUtil.print(origin);
    // 执行排序算法
    for (Sorts each : Sorts.values()) {
        System.out.print(each.name() + ":   ");
        int[] data = Arrays.copyOf(origin, origin.length);
        each.sort(data);
        SortUtil.print(data);
    }
    // api使用经过调优的快速排序
    Arrays.sort(origin);
    System.out.print("jdkApi:   ");
    SortUtil.print(origin);
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
