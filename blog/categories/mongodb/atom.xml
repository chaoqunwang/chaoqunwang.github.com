<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[文章分类：mongodb | 超群的博客]]></title>
  <link href="http://wangchaoqun.com/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://wangchaoqun.com/"/>
  <updated>2014-04-18T17:45:22+08:00</updated>
  <id>http://wangchaoqun.com/</id>
  <author>
    <name><![CDATA[wang chaoqun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MongoDB replSet集群和shard分片]]></title>
    <link href="http://wangchaoqun.com/blog/2013/11/mongodb-replsetji-qun-he-shardfen-pian.html/"/>
    <updated>2013-11-17T16:11:35+08:00</updated>
    <id>http://wangchaoqun.com/blog/2013/11/mongodb-replsetji-qun-he-shardfen-pian</id>
    <content type="html"><![CDATA[<p>mongodb的集群有两种：1.主从(master, slave)  2.副本集(Replica Set)<br/>
区别是副本集没有固定的"主节点", 有一个活跃节点(primary)和  一个或多个备份节点(secondary), 而且可以在活跃节点有问题时自动切换（仲裁\选举方式）<br/>
本文内容的结果是：建立2个分片，每个分片3个备份节点（端口1000x,2000x），2个选举节点（端口10000,20000），1个路由(端口7701，想选7000被占了)，3个config节点(端口660x，想选6000也被占了)，总共12个<!--more--></p>

<h4>1. MongoDB集群</h4>

<p>将mongodb的zip解压到不同的文件夹（本文是windows下，linux类似），建立3个节点（1000X是myshard1分片的），注意端口号，启动：
<code>
c:\mongo10001\bin\mongod -f c:\mongo10001\config
c:\mongo10002\bin\mongod -f c:\mongo10002\config
c:\mongo10003\bin\mongod -f c:\mongo10003\config
</code>
使用config文件配置，mongo10001节点的内容如下，其他相应修改即可：
<code>
port=10001
dbpath=C:\mongo10001\data\
logpath=C:\mongo10001\log\mongo.log
replSet=myshard1/127.0.0.1:10002,127.0.0.1:10003
shardsvr=true
logappend=true
rest=true
</code>
仲裁节点（可选，要的话后面还有要addArb）<br/>
<code>
c:\mongo10000\bin\mongod -f c:\mongo10000\config
or
c:\mongo10000\bin\mongod --dbpath=c:\mongo10000\data --port 10000 --replSet myshard1/127.0.0.1:10001  
</code></p>

<p>将各节点启动后，cmd下连接并执行初始化命令：<br/>
<code>
mongo 127.0.0.1:10001/admin
db.runCommand({"replSetInitiate":{ "_id":"myshard1", "members":[{ "_id":1, "host":"127.0.0.1:10001"}, { "_id":2, "host":"127.0.0.1:10002"}, { "_id":3, "host":"127.0.0.1:10003"}] }})
</code>
这个2000X是myshard2分片的3个节点，需要像前面一样配好、启动、执行，不分片可忽略
<code>
mongo 127.0.0.1:20001/admin
db.runCommand({"replSetInitiate":{ "_id":"myshard2", "members":[{ "_id":1, "host":"127.0.0.1:20001"}, { "_id":2, "host":"127.0.0.1:20002"}, { "_id":3, "host":"127.0.0.1:20003"}] }})
</code>
查看状态
<code>
rs.status()
</code>
仲裁节点（可选，前面没配置就不要add了）<br/>
<code>
rs.addArb("127.0.0.1:10000")
</code></p>

<p><strong>测试</strong>在一个节点导入数据后，查看其他节点数据也有了
<code>
mongorestore -h 127.0.0.1:10001 --directoryperdb b:\mongo\dump
</code><br/>
<strong>注意</strong>：关于节点的读写操作
在primary节点中添加数据: db.xxxx.insert
如果在secondary备份节点查询，会出现错误:
<code>
error: { "$err" : "not master and slaveok=false", "code" : 13435 }
</code>
执行如下语句:
<code>
db.getMongo().setSlaveOk();
</code>
这是因为对于replica set中的secondary节点默认是不可读的，由Secondary来分担读的压力，Primary只承担写操作，通过在连接时指定或者在主库指定slaveOk即可</p>

<h4>spring data mongodb的集群配置（未分片）</h4>

<p>原来使用单一mongo的，现在要用集群，就把spring xml配置和properties做相应修改：
```
&lt;mongo:mongo replica-set=&ldquo;${mongo.replica.set}&rdquo;/></p>

<p>mongo.replica.set=127.0.0.1:10001,127.0.0.1:10002,127.0.0.1:10003
```</p>

<h4>2. MongoDB分片</h4>

<p>[摘录]基本思想就是将集合切分成小块，这些块分散到若干片里面，每个片只负责总数据的一部分；应用程序不必知道
哪片对应哪些数据，甚至不需要知道数据已经被拆分了，所以在分片之前要运行一个路由进程，进程名mongos，这个路由器知道
所有数据的存放位置，所以应用可以连接它来正常发送请求；对应用来说，它仅知道连接了一个普通的mongod；路由器知道和片的
对应关系，能够转发请求到正确的片上；如果请求有了回应，路由器将其收集起来回送给应用。<br/>
标签：<a href="/blog/categories/mongodb">mongodb</a><br/>
所以，<strong>在下面的分片完成后</strong>，上面spring data mongodb的集群配置就要<strong>改回单一mongo的，注意要连接的是mongos，不是原来那个</strong></p>

<p>好了，这里要有路由节点和config节点<br/>
开启<strong>config服务器</strong>（我配了3个，为了测试有节点挂掉的情况，这只是第1个），使用参数或config文件启动
<code>
c:\mongo6001\bin\mongod --dbpath=c:\mongo6001\data --port 6001 --configsvr
c:\mongo6001\bin\mongod -f c:\mongo6001\config
</code></p>

<p>config文件：
<code>
port=6001
dbpath=C:\mongo6001\data\
logpath=C:\mongo6001\log\mongo.log
configsvr=true
logappend=true
rest=true
</code></p>

<p>开启<strong>mongos服务器</strong>，使用参数或config文件启动
<code>
c:\mongo7701\bin\mongos --port 7701 --configdb=127.0.0.1:6001
c:\mongo7701\bin\mongos -f c:\mongo7701\config  
</code>
config文件：
```
port=7701
logpath=C:\mongo7701\log\mongo.log</p>

<h1>configdb说明：一个就写一个，多个就写多个，这里是3个</h1>

<p>configdb=127.0.0.1:6001,127.0.0.1:6002,127.0.0.1:6003
logappend=true
```</p>

<p><strong>启动mongod服务器，上面集群配了3个，启动即可（2000X是myshard2分片的，也启动）</strong>
<code>
c:\mongo10001\bin\mongod -f c:\mongo10001\config
c:\mongo10002\bin\mongod -f c:\mongo10002\config
c:\mongo10003\bin\mongod -f c:\mongo10003\config
c:\mongo20001\bin\mongod -f c:\mongo20001\config
c:\mongo20002\bin\mongod -f c:\mongo20002\config
c:\mongo20003\bin\mongod -f c:\mongo20003\config
</code>
<strong>连接mongos服务器</strong>
<code>
C:\Users\wangchaoqun&gt;mongo 127.0.0.1:7701/admin
MongoDB shell version: 2.4.8
connecting to: 127.0.0.1:7701/admin
</code>
然后将10001，10002，10003的mongod交给mongos,添加分片也就是addshard()<br/>
<strong>两个分片的集群，每个分片3个备份节点</strong>
<code>
db.runCommand({addshard:"myshard1/127.0.0.1:10001,127.0.0.1:10002,127.0.0.1:10003",allowlocal:true})
db.runCommand({addshard:"myshard2/127.0.0.1:20001,127.0.0.1:20002,127.0.0.1:20003",allowlocal:true})
</code></p>

<p>片已经集群了，但是mongos不知道该如何切分数据，要在mongos设置片键：<br/>
1. 开启数据库分片功能
<code>
mongos&gt; db.runCommand({"enablesharding":"mytestdb"})
{ "ok" : 1 }
</code><br/>
2. 指定集合中分片的片键，这里使用users里的name
<code>
mongos&gt; db.runCommand({shardcollection:"mytestdb.users",key:{name:1}})
{ "collectionsharded" : "mytestdb.users", "ok" : 1 }
</code></p>

<h4>3. 测试</h4>

<p>通过mongos向mongodb插入10w记录
```
use mytestdb
for(var i=0;i&lt;100000;i++){</p>

<pre><code>var x="poiuytrewqasdfghjklmnbvcxz";
var c=x.charAt(Math.ceil(Math.random() * 25));
var t=Math.ceil(Math.random() * 100000);
var content=c+t;
var time=new Date().getTime()-Math.ceil(Math.random() * 100)*t;
db.users.insert({"content":content,"creatorId":""+i%7,"createtime":time});
</code></pre>

<p>}
<code>  
通过printShardingStatus命令查看mongodb的数据分片情况  
</code>
db.printShardingStatus();
```
每个节点都看看，是不是数据都有了</p>

<h4>4. 参考</h4>

<p><a href="http://blog.sina.com.cn/s/blog_498e79cc0101115v.html">http://blog.sina.com.cn/s/blog_498e79cc0101115v.html</a>
<a href="http://www.cnblogs.com/huangxincheng/archive/2012/03/04/2379755.html">http://www.cnblogs.com/huangxincheng/archive/2012/03/04/2379755.html</a>
<a href="http://www.cnblogs.com/refactor/archive/2012/08/13/2600140.html">http://www.cnblogs.com/refactor/archive/2012/08/13/2600140.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongodb, Mysql导出备份至ftp]]></title>
    <link href="http://wangchaoqun.com/blog/2013/11/mongodb-he-mysql-dao-chu-bei-fen-bing-shang-chuan-zhi-ftp.html/"/>
    <updated>2013-11-03T17:10:32+08:00</updated>
    <id>http://wangchaoqun.com/blog/2013/11/mongodb-he-mysql-dao-chu-bei-fen-bing-shang-chuan-zhi-ftp</id>
    <content type="html"><![CDATA[<p>前提是mongodb和mysql已经安装使用，先安装vsftp，配置完成后，在编写shell脚本，使用计划任务执行<br/>
1. 安装vsftp<br/>
<code>
rpm -q vsftpd
yum -y install vsftpd
</code></p>

<!--more-->


<p>设置开机启动<br/>
<code>
chkconfig vsftpd on
</code>
启动vsftpd服务 <br/>
<code>
service vsftpd start
</code>
增加新用户ftpuser，设置权限和密码<br/>
<code>
useradd -d /home/ftpuser -s /sbin/nologin ftpuser
chown -R ftpuser /home/ftpuser
chmod 777 -R /home/ftpuser
passwd ftpuser
</code>
配置vsftp
<code>
vi /etc/vsftpd/vsftpd.conf
</code>
内容删掉换成以下
<code>
anonymous_enable=NO
local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
xferlog_enable=YES
connect_from_port_20=YES
xferlog_std_format=YES
chroot_list_enable=YES
chroot_list_file=/etc/vsftpd/chroot_list
listen=YES
pam_service_name=vsftpd
userlist_enable=YES
tcp_wrappers=YES
pasv_min_port=10000
pasv_max_port=10030
</code>
添加chroot_list文件
<code>
vi /etc/vsftpd/chroot_list
</code>
内容<code>ftpuser</code><br/>
重启服务<code>service vsftpd restart</code><br/>
防火墙开放21端口
<code>
service iptables stop
vi /etc/sysconfig/iptables
</code>
添加
<code>
-A INPUT -m state --state NEW -m tcp -p tcp --dport 21 -j ACCEPT
</code><br/>
重启防火墙服务
<code>
service iptables start
</code><br/>
解决用户无法进入目录问题，终端执行：<br/>
<code>
setsebool -P ftp_home_dir 1
</code><br/>
然后重启FTP服务：
<code>
service vsftpd restart
</code></p>

<h2>2. mongodb导出、压缩、上传脚本，删除过期文件  </h2>

<p>先定义好服务器、数据库、各目录、用户名、密码</p>

<p>```</p>

<h1>!/bin/bash</h1>

<p>MONGO_HOST=&ldquo;127.0.0.1:27017&rdquo;
MONGO_DB=&ldquo;mydbname&rdquo;
MONGO_DUMP=&ldquo;/usr/local/mongo/bin/mongodump&rdquo;
MONGO_BACKUP=&ldquo;/usr/local/mongo/backup&rdquo;
NEW_TIMESTAMP=$(date +%F-%H%M)
OLD_TIMESTAMP=$(date -d &lsquo;-5 days&rsquo; &ldquo;+%F-%H%M&rdquo;)
NEW_BACKUP_FILE=&ldquo;$MONGO_DB.$NEW_TIMESTAMP.tar.gz&rdquo;
OLD_BACKUP_FILE=&ldquo;$MONGO_DB.$OLD_TIMESTAMP.tar.gz&rdquo;</p>

<h1>0.temp dir</h1>

<p>if [ ! -d $MONGO_BACKUP/$MONGO_DB.$NEW_TIMESTAMP ]
then
 mkdir $MONGO_BACKUP/$MONGO_DB.$NEW_TIMESTAMP
fi</p>

<h1>1.mongodump then delete old dir and file</h1>

<p>$MONGO_DUMP -h $MONGO_HOST -d $MONGO_DB -o $MONGO_BACKUP/$MONGO_DB.$NEW_TIMESTAMP
cd $MONGO_BACKUP/$MONGO_DB.$NEW_TIMESTAMP &amp;&amp; tar -zcf $MONGO_BACKUP/$NEW_BACKUP_FILE */
rm -rf $MONGO_BACKUP/$MONGO_DB.$NEW_TIMESTAMP
rm -rf $MONGO_BACKUP/$OLD_BACKUP_FILE</p>

<h1>2.upload new and delte old files</h1>

<h1>!/bin/sh</h1>

<p>FTP_HOST=&ldquo;192.168.100.119&rdquo;
FTP_PORT=&ldquo;21&rdquo;
FTP_USER=&ldquo;ftpuser&rdquo;
FTP_PSWD=&ldquo;123456&rdquo;
FTP_DIR=&ldquo;mongo-backup&rdquo;</p>

<p>ftp -nv &lt;&lt;!
open $FTP_HOST $FTP_PORT
user $FTP_USER $FTP_PSWD
binary
prompt
cd $FTP_DIR
mdelete $OLD_BACKUP_FILE
lcd $MONGO_BACKUP
mput $NEW_BACKUP_FILE
close
bye
!
echo &ldquo;============== $MONGO_DB backup ends at $NEW_TIMESTAMP ==============&rdquo;
```<br/>
标签：<a href="/blog/categories/tech">技术</a></p>

<h2>3. mysql导出、压缩、上传脚本  </h2>

<p>```</p>

<h1>! /bin/bash</h1>

<p>MYSQL_HOST=&ldquo;192.168.100.119&rdquo;
MYSQL_PORT=&lsquo;3306&rsquo;
MYSQL_USER=&lsquo;myuser&rsquo;
MYSQL_PSWD=&lsquo;mypass&rsquo;
MYSQL_DB=&lsquo;mydbname&rsquo;
MYSQL_DUMP=&ldquo;/usr/bin/mysqldump&rdquo;
MYSQL_BACKUP=&ldquo;/usr/local/mysql/backup&rdquo;
NEW_TIMESTAMP=$(date +%F-%H%M)
OLD_TIMESTAMP=$(date -d &lsquo;-5 days&rsquo; &ldquo;+%F-%H%M&rdquo;)
GZIP=&ldquo;$(which gzip)&rdquo;</p>

<h1>1.mysql dump and delete old files</h1>

<p>$MYSQL_DUMP -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PSWD $MYSQL_DB | $GZIP -9 > $MYSQL_BACKUP/$MYSQL_DB.$NEW_TIMESTAMP.gz
rm -rf $MYSQL_BACKUP/$MYSQL_DB.$OLD_TIMESTAMP.gz
echo &ldquo;============== mysqldump ends at $NEW_TIMESTAMP ==============&rdquo;</p>

<h1>2.upload new and delete old files</h1>

<p>FTP_HOST=&ldquo;192.168.100.119&rdquo;
FTP_PORT=&ldquo;21&rdquo;
FTP_USER=&ldquo;ftpuser&rdquo;
FTP_PSWD=&ldquo;123456&rdquo;
FTP_DIR=&ldquo;mysql-backup&rdquo;</p>

<p>ftp -nv &lt;&lt;!
open $FTP_HOST $FTP_PORT
user $FTP_USER $FTP_PSWD
binary
prompt
cd $FTP_DIR
lcd $MYSQL_BACKUP
mput $MYSQL_DB.$NEW_TIMESTAMP.gz
mdelete $MYSQL_DB.$OLD_TIMESTAMP.gz
close
bye
!
echo &ldquo;============== mysql upload ends at $NEW_TIMESTAMP ==============&rdquo;
```</p>

<h2>4. 添加计划任务</h2>

<p>```
crontab -e</p>

<h1>every day at 00m</h1>

<p>00 * * * * /bin/bash /usr/local/mongo/cmd/mongo_backup.sh
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongodb Aggregation Framework总结]]></title>
    <link href="http://wangchaoqun.com/blog/2013/05/mongodb-aggregation-framework-zong-jie.html/"/>
    <updated>2013-05-18T12:56:21+08:00</updated>
    <id>http://wangchaoqun.com/blog/2013/05/mongodb-aggregation-framework-zong-jie</id>
    <content type="html"><![CDATA[<p>2.2版本新特性，比group, MapReduce简单强大，reference里有很多操作和[运算]可用<br/>
pipeline operators:<br/>
• $project (page 285)<br/>
• $match (page 281)<br/>
• $limit (page 280)<br/>
• $skip (page 287)<br/>
• $unwind (page 290)// 用于嵌套文档，可对数组拆解<br/>
• $group (page 278)<br/>
• $sort (page 287)<br/>
• $geoNear (page 276)    <!--more--></p>

<p>和SQL的对应关系：<br/>
WHERE $match (page 281)<br/>
GROUP BY $group (page 278)<br/>
HAVING $match (page 281)<br/>
SELECT $project (page 285)<br/>
ORDER BY $sort (page 287)<br/>
LIMIT $limit (page 280)<br/>
SUM() $sum<br/>
COUNT() $sum<br/>
join No direct corresponding operator; however, the $unwind (page 290) operator allows for
somewhat similar functionality, but with fields embedded within the document.</p>

<p>场景: 比如按省份城市统计发帖数目，比如按人统计发帖排名：<br/>
``` javascript
db.topic.aggregate(
{ $match: { createtime : { $gt:1370000000000 } } },
{ $group : {</p>

<pre><code>_id : { id:"$creatorId", name:"$creator" },
upCount : {$sum : "$upCount"},
downCount : {$sum : "$downCount"}
}},
</code></pre>

<p>{ $project : {</p>

<pre><code>_id : 0,
name : "$_id.name",
total : { $add : ["$upCount", "$downCount"]}
}},
</code></pre>

<p>{ $sort: { total : -1 } },
{ $skip: 0 },
{ $limit: 3 }
);
{</p>

<pre><code>"result" : [
    {
            "name" : "俞章数",
            "total" : 108
    },
    {
            "name" : "马晴",
            "total" : 87
    },
    {
            "name" : "苏妙玲",
            "total" : 58
    }
],
"ok" : 1
</code></pre>

<p>}
<code>
标签：[mongodb](/blog/categories/mongodb)  
java driver 官方示例：  
</code> java
// create our pipeline operations, first with the $match
DBObject match = new BasicDBObject(&ldquo;$match&rdquo;, new BasicDBObject(&ldquo;type&rdquo;, &ldquo;airfare&rdquo;) );</p>

<p>// build the $projection operation
DBObject fields = new BasicDBObject(&ldquo;department&rdquo;, 1);
fields.put(&ldquo;amount&rdquo;, 1);
fields.put(&ldquo;_id&rdquo;, 0);
DBObject project = new BasicDBObject(&ldquo;$project&rdquo;, fields );</p>

<p>// Now the $group operation
DBObject groupFields = new BasicDBObject( &ldquo;_id&rdquo;, &ldquo;$department&rdquo;);
groupFields.put(&ldquo;average&rdquo;, new BasicDBObject( &ldquo;$avg&rdquo;, &ldquo;$amount&rdquo;));
DBObject group = new BasicDBObject(&ldquo;$group&rdquo;, groupFields);</p>

<p>// run aggregation
AggregationOutput output = collection.aggregate( match, project, group );
```</p>

<p>spring data mongodb，@since 1.3，注意升级<br/>
官方例子是对城市人口做统计，group两次（对第一次group的结果再group）<br/>
好处在于对结果进行了封装，返回List，注意ZipInfoStats嵌套City，使用nested和bind:<br/>
``` java
class ZipInfo {</p>

<pre><code>String id;
String city;
String state;
@Field("pop") int population;
@Field("loc") double[] location;
</code></pre>

<p>}
class City {</p>

<pre><code>String name;
int population;
</code></pre>

<p>}
class ZipInfoStats {</p>

<pre><code>String id;
String state;
City biggestCity;
City smallestCity;
</code></pre>

<p>}</p>

<p>import static org.springframework.data.mongodb.core.aggregation.Aggregation.*;
TypedAggregation<ZipInfo> aggregation = newAggregation(ZipInfo.class,</p>

<pre><code>group("state", "city")
    .sum("population").as("pop"),
sort(ASC, "pop", "state", "city"),
group("state")
    .last("city").as("biggestCity")
    .last("pop").as("biggestPop")
    .first("city").as("smallestCity")
    .first("pop").as("smallestPop"),
project()
    .and("state").previousOperation()
    .and("biggestCity")
    .nested(bind("name", "biggestCity").and("population", "biggestPop"))
    .and("smallestCity")
    .nested(bind("name", "smallestCity").and("population", "smallestPop")),
sort(ASC, "state")
</code></pre>

<p>);
AggregationResults<ZipInfoStats> result = mongoTemplate.aggregate(aggregation, ZipInfoStats.class);
ZipInfoStats firstZipInfoStats = result.getMappedResults().get(0);
```</p>

<p>对应的shell即是：<br/>
``` javascript
db.zipcodes.aggregate(
{ $group:</p>

<pre><code>{   _id: { state: "$state", city: "$city" },
    pop: { $sum: "$pop" } } 
</code></pre>

<p>},
{ $sort: { pop: 1 } },
{ $group:</p>

<pre><code>{   _id : "$_id.state",
    biggestCity: { $last: "$_id.city" },
    biggestPop: { $last: "$pop" },
    smallestCity: { $first: "$_id.city" },
    smallestPop: { $first: "$pop" } } 
</code></pre>

<p>},
// the following $project is optional, and
// modifies the output format.
{ $project:</p>

<pre><code>{   _id: 0,
    state: "$_id",
    biggestCity: { name: "$biggestCity", pop: "$biggestPop" },
    smallestCity: { name: "$smallestCity", pop: "$smallestPop" } } 
</code></pre>

<p>} )
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB常用命令和操作总结2]]></title>
    <link href="http://wangchaoqun.com/blog/2013/05/mongodb-chang-yong-ming-ling-he-cao-zuo-zong-jie-2.html/"/>
    <updated>2013-05-10T10:09:23+08:00</updated>
    <id>http://wangchaoqun.com/blog/2013/05/mongodb-chang-yong-ming-ling-he-cao-zuo-zong-jie-2</id>
    <content type="html"><![CDATA[<p>做个总结，涉及到mongodb的常用命令、java driver查询、spring data mongodb的使用，group，MapReduce，aggregation framework等</p>

<h3>group</h3>

<p>topic : reply = one to many，按topic(或发布者)分组统计回复数
shell:
```</p>

<blockquote><p>db.reply.group({ &ldquo;key&rdquo; : { &ldquo;topic&rdquo; : 1} , &ldquo;$reduce&rdquo; : &ldquo;function(doc, prev) {
 prev.total += 1; }&rdquo; , &ldquo;initial&rdquo; : {&ldquo;total&rdquo; : 0}})
```</p></blockquote>

<!--more-->


<p>spring-data-mongodb:
``` java
Criteria cri = Criteria.where(&ldquo;createtime&rdquo;).gt(1380000000000L);// 时间条件
GroupBy groupBy = GroupBy</p>

<pre><code>    .key("topic").initialDocument("{total: 0 }")
    .reduceFunction("function(doc, prev) { prev.total += 1; }");
</code></pre>

<p>String collection = mongoTemplate.getCollectionName(Reply.class);
GroupByResults<Reply> replys = mongoTemplate.group(cri, collection, groupBy, Reply.class);
```</p>

<p>另一个例子：统计提问的回复（有内容的和简单赞踩），按权重计算热度
``` java
String reduceFunction = &ldquo;function(doc, out) { if (doc.content) { out.contentCount += 1;} &rdquo;</p>

<pre><code>    + "else { out.simpleCount += 1; }; out.topic = doc.topic}";
</code></pre>

<p>String finalizeFunction = &ldquo;function(out) { out.rankScore = out.simpleCount * &rdquo; + ratio</p>

<pre><code>    + " + out.contentCount * (" + (10 - ratio) + ") } ";
</code></pre>

<p>GroupBy groupBy = GroupBy</p>

<pre><code>    .keyFunction("function(doc) { return { topic: doc.topic }; }")
    .initialDocument("{contentCount: 0, simpleCount: 0 }")
    .reduceFunction(reduceFunction).finalizeFunction(finalizeFunction);
</code></pre>

<p>```</p>

<p>java driver:
<code>java
public GroupCommand(DBCollection inputCollection, DBObject keys, DBObject condition, DBObject initial, String reduce, String finalize)
DBCollection collection = mongoTemplate.getCollection("reply");
collection.group(...);
</code></p>

<h3>MapReduce</h3>

<p>场景：展示发帖或回帖的时间趋势图，或者说按整点显示此小时内的发帖数和回帖数，展示成折线图
创建时间保存的是number long，即date.getTime()的值，key要转成小时，使用new Date(y,m,d,h,0,0,0)<br/>
标签：<a href="/blog/categories/mongodb">mongodb</a><br/>
spring-data-mongodb:
``` java
String mapFunction = &ldquo;function () { var key=new Date(new Date(this.createtime).getFullYear(),&rdquo;</p>

<pre><code>    + "new Date(this.createtime).getMonth(), new Date(this.createtime).getDate(),"
    + "new Date(this.createtime).getHours(), 0, 0, 0).getTime(); "
    + "emit( key, { hour:key, count:1 } ); }";
</code></pre>

<p>String reduceFunction = &ldquo;function (key, values) { &rdquo;</p>

<pre><code>    + " var total = 0;" 
    + " for (var i=0; i&lt;values.length; i++) { "
    + "     total += values[i].count; "
    + " }" 
    + " return { hour:key, count:total }; "
    + "}";
</code></pre>

<p>MapReduceResults<Reply> results = mongoTemplate.mapReduce(</p>

<pre><code>    new Query(cri), collectionName, mapFunction,
    reduceFunction, Reply.class);
</code></pre>

<p>List<Reply> replys = Lists.newArrayList(results);
for (Replys reply : replys) {</p>

<pre><code>ReplyStat value = reply.getValue();
System.out.println(value.getHour() + " : " + value.getCount());
</code></pre>

<p>}
```</p>

<p>需要注意的是：结果存在reply的value字段里，是为了后面构造map好处理；场景不一样的话，先使用shell看看结果
``` java
private ReplyStat value;
class ReplyStat {</p>

<pre><code>private Long hour;
private Long count;
</code></pre>

<p>```</p>

<p>shell:
``` javascript
db.runCommand({ mapreduce: &ldquo;reply&rdquo;,
 map : function Map() {</p>

<pre><code>var key=new Date(new Date(this.createtime).getFullYear(), 
    new Date(this.createtime).getMonth(), 
    new Date(this.createtime).getDate(),
    new Date(this.createtime).getHours(), 0, 0, 0).getTime(); 
emit( key, { hour:key, count:1 } );
</code></pre>

<p>},
 reduce : function Reduce(key, values) {</p>

<pre><code>var total = 0;  
for (var i=0; i&lt;values.length; i++) {
    total += values[i].count;   
}   
return { hour:key, count:total };
</code></pre>

<p>},
 finalize : function Finalize(key, reduced) {</p>

<pre><code>return reduced;
</code></pre>

<p>},
 query : { &ldquo;type&rdquo; : 1, &ldquo;$and&rdquo; : [</p>

<pre><code>{ "createtime" : { "$gt" : NumberLong("1370000000000") } }, 
{ "createtime" : { "$lt" : NumberLong("1380000000000") } }] 
</code></pre>

<p>},
 out : { inline : 1 }
});
```</p>

<p>======result======
``` javascript
{</p>

<pre><code>    "results" : [
            {
                    "_id" : 1376881200000,
                    "value" : {
                            "hour" : 1376881200000,
                            "count" : 2
                    }
            },
            {
                    "_id" : 1376884800000,
                    "value" : {
                            "hour" : 1376884800000,
                            "count" : 5
                    }
            },
            ...
            {
                    "_id" : 1379404800000,
                    "value" : {
                            "hour" : 1379404800000,
                            "count" : 27
                    }
            }
    ],
    "timeMillis" : 24,
    "counts" : {
            "input" : 263,
            "emit" : 263,
            "reduce" : 35,
            "output" : 43
    },
    "ok" : 1
</code></pre>

<p>}
```</p>

<p>如果emit修改成
<code>
emit( key, {count:1} );
</code>
reduce里
<code>
return {count:total};
</code>
结果就会是：
``` javascript
{</p>

<pre><code>    "results" : [
            {
                    "_id" : 1376881200000,
                    "value" : {
                            "count" : 2
                    }
            },
            {
                    "_id" : 1376884800000,
                    "value" : {
                            "count" : 5
                    }
            },
            {
                    "_id" : 1376888400000,
                    "value" : {
                            "count" : 8
                    }
            }
    ],
    "timeMillis" : 22,
    "counts" : {
            "input" : 263,
            "emit" : 263,
            "reduce" : 35,
            "output" : 43
    },
    "ok" : 1
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB常用命令和操作总结1]]></title>
    <link href="http://wangchaoqun.com/blog/2013/05/mongodb-chang-yong-ming-ling-he-cao-zuo-zong-jie-1.html/"/>
    <updated>2013-05-09T16:29:59+08:00</updated>
    <id>http://wangchaoqun.com/blog/2013/05/mongodb-chang-yong-ming-ling-he-cao-zuo-zong-jie-1</id>
    <content type="html"><![CDATA[<p>做个总结，涉及到mongodb的常用命令、java driver查询、spring data mongodb的使用，group，map-reduce，aggregation framework等</p>

<h3>关闭服务</h3>

<p><code>
use admin
db.shutdownServer()
</code></p>

<h3>加锁</h3>

<p><code>
use admin
db.runCommand({"fsync":1,"lock":1})
</code></p>

<!--more-->


<h3>解锁</h3>

<p><code>
use admin
db.$cmd.sys.unlock.findOne()
db.currentOp()    
{"inprog":[]}
</code></p>

<h3>导出和导入</h3>

<p><code>
mongodump -h 192.168.0.100:27017 -d mydb -o B:\mongo\dump
mongorestore -h 127.0.0.1:27017 --directoryperdb B:\mongo\dump
</code></p>

<h3>用户</h3>

<p><code>
use admin
db.addUser('name','pwd')
db.system.users.find()
db.auth('name','pwd')
db.removeUser('name')
</code></p>

<h3>数据库</h3>

<p><code>
db.copyDatabase('projectDB1', 'projectDB2')
db.projectDB1.drop()
db.dropDatabase()
</code></p>

<h3>增删改</h3>

<p><code>
db.mycollection.inser,save,update...
</code></p>

<h3>索引</h3>

<p><code>
db.user.ensureIndex({firstname: 1, lastname: 1}, {unique: true});
db.user.dropIndex('address.post_1')
</code></p>

<h3>查询</h3>

<p><code>
db.mycollection.find,findOne,distinct.sort({'createTime',-1}).skip(3).limit(10)
db.user.insert({"name":"cq","age":28,"address":{"province":100,"city":101}})
db.user.find({"_id":ObjectId("52f830f3aab82981150db455")})
db.user.find({"address":{"province":100,"city":101}})  # one record
db.user.find({"address":{"city":101,"province":100}})  # nothing
db.user.find({"address.city":101,"address.province":100})  # one record
</code>
注意：key的顺序,因为MongoDB使用BSON的二进制数据格式<br/>
注意：limit的值例如为-5的话等同于5，为0则返回全部，汗<br/>
标签：<a href="/blog/categories/tech">技术</a><br/>
<code>
db.user.find({creationTime:{$gt:1300000000000, $lte:1310000000000});
</code>
$elemMatch:前2个不对，匹配数组查询要用第3个<br/>
<code>
db.blog.find({"comments.name": "foo", "comments.content": "bar"});
db.blog.find({"comments": {"name": "foo", "content": "bar"}});
db.blog.find({"comments":{"$elemMatch":{"name":"joke", "content":"bad good ugly"}}});
</code>
使用where可做运算<br/>
<code>
db.reply.find({$where: "this.upCount+this.downCount&lt;1"});
db.reply.find("this.upCount+this.downCount&lt;1");
</code></p>

<h3>返回和排除字段</h3>

<p><code>
db.user.find({"name":"cq"}, {age:1, address:0});
count
db.topic.find().skip(10).limit(5).count(); # 所有的记录数量
</code><br/>
要返回限制的记录数量，要使用count(true)或count(非0)
<code>
db.topic.find().skip(10).limit(5).count(true);
</code></p>

<h3>dbref关联</h3>

<p>多查一<br/>
``` javascript</p>

<blockquote><p>db.reply.findOne({creator:&ldquo;wy&rdquo;}, {creator:1,topic:1})
{</p>

<pre><code>    "_id" : ObjectId("52d3ae720b6316a72bb31c45"),
    "creator" : "wy",
    "topic" : DBRef("topic", ObjectId("52cf620a0b6307f6a0d44450"))
</code></pre>

<p>}
db.reply.findOne({creator:&ldquo;wy&rdquo;}).topic
DBRef(&ldquo;topic&rdquo;, ObjectId(&ldquo;52cf620a0b6307f6a0d44450&rdquo;))
db.reply.findOne({creator:&ldquo;wy&rdquo;}).topic.fetch()
{</p>

<pre><code>    "_id" : ObjectId("52cf620a0b6307f6a0d44450"),
    "content" : "xxx",
    "createtime" : NumberLong("1389322762932"),
    "creator" : "zzz"
    ...
</code></pre>

<p>}
```</p></blockquote>

<p>一查多<br/>
``` javascript</p>

<blockquote><p>topic=db.reply.findOne({creator:&ldquo;wy&rdquo;}).topic
DBRef(&ldquo;topic&rdquo;, ObjectId(&ldquo;52cf620a0b6307f6a0d44450&rdquo;))
db.reply.find({&ldquo;topic&rdquo;:topic}).count()
2
topic=db.reply.findOne({creator:&ldquo;wy&rdquo;}).topic
DBRef(&ldquo;topic&rdquo;, ObjectId(&ldquo;52cf620a0b6307f6a0d44450&rdquo;))
db.reply.find({&ldquo;topic.$id&rdquo;:topic.$id}).count()
2
topic=db.reply.findOne({creator:&ldquo;wy&rdquo;}).topic.fetch()
{</p>

<pre><code>    "_id" : ObjectId("52cf620a0b6307f6a0d44450"),
    "content" : "xxx",
    "createtime" : NumberLong("1389322762932"),
    "creator" : "zzz"
    ...
</code></pre>

<p>}
db.reply.find({&ldquo;topic.$id&rdquo;:topic._id}).count()
2
```</p>

<h4>spring data mongodb</h4>

<p>``` java
Criteria cri = Criteria.where(&ldquo;topic.$id&rdquo;).is(new ObjectId(&ldquo;52d8f8950b6316a72bb31c7c&rdquo;));
Reply reply = mongoTemplate.findOne(Query.query(cri), Reply.class);</p></blockquote>

<p>cri.andOperator(Criteria.where(&ldquo;passedtime&rdquo;).gt(fromTime), Criteria.where(&ldquo;passedtime&rdquo;).lt(toTime));
// 错误的：Criteria.where(&ldquo;passedtime&rdquo;).gt(fromTime).and(&ldquo;passedtime&rdquo;).lt(toTime)
```</p>

<h4>java driver 可以这样：</h4>

<p>``` java
String total = &ldquo;this.upCount+this.downCount &lt; &rdquo; + minCount;
BasicDBObject query = new BasicDBObject(&ldquo;$where&rdquo;, total);
query.append(&ldquo;passedtime&rdquo;, new BasicDBObject(&ldquo;$gt&rdquo;, fromTime).append(&ldquo;$lt&rdquo;, toTime));
// TODO query.append(other conditions);</p>

<p>// 返回字段
BasicDBObject keys = new BasicDBObject();
keys.put(&ldquo;_id&rdquo;, 1);
keys.put(&ldquo;creator&rdquo;, 1);</p>

<p>MongoClient mongoClient = new MongoClient(new ServerAddress(&ldquo;localhost&rdquo;, 27017));
DB db = mongo.getDB(&ldquo;mydb&rdquo;);
DBCollection collection = db.getCollection(&ldquo;test&rdquo;);</p>

<p>long count = collection.count(query);
DBCursor cursor = collection.find(query, keys).limit(size);
for (int i = 0; i &lt; size; i++) {</p>

<pre><code>DBObject e = cursor.next();
String topicId = e.get("_id").toString();
// TODO
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
