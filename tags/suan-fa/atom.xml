<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 算法 | 超群的博客]]></title>
  <link href="http://wangchaoqun.com/tags/suan-fa/atom.xml" rel="self"/>
  <link href="http://wangchaoqun.com/"/>
  <updated>2014-04-18T10:36:33+08:00</updated>
  <id>http://wangchaoqun.com/</id>
  <author>
    <name><![CDATA[wang chaoqun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[常用排序算法的java实现]]></title>
    <link href="http://wangchaoqun.com/blog/2010/08/chang-yong-pai-xu-suan-fa-de-java-shi-xian.html/"/>
    <updated>2010-08-09T13:09:09+08:00</updated>
    <id>http://wangchaoqun.com/blog/2010/08/chang-yong-pai-xu-suan-fa-de-java-shi-xian</id>
    <content type="html"><![CDATA[<p>分类 &ndash; 插入排序：直接插入排序，希尔排序
&ndash; 交换排序：冒泡排序，快速排序
&ndash; 选择排序：简单选择排序，堆排序
&ndash; 归并排序<br/>
时间复杂度：简单排序如插入、冒泡、选择是O(n²)，高级如快速、归并、堆是O(nlgn)<br/>
本类使用枚举存入各算法和接口实现，main方法打印排序后的数组<br/>
```java
/<em>*
 * 排序算法接口
 </em>/
interface Sort {</p>

<pre><code>public void sort(int[] data);
</code></pre>

<p>}</p>

<p>```</p>

<!--more-->


<p></p>

<p>```java
/<em>*
 * 排序算法枚举
 </em>/
enum Sorts {</p>

<pre><code>INSERT() {
    public void sort(int[] data) {
        new InsertSort().sort(data);
    }
},
BUBBLE() {
    public void sort(int[] data) {
        new BubbleSort().sort(data);
    }
},
SELECT() {
    public void sort(int[] data) {
        new SelectionSort().sort(data);
    }
},
SHELL() {
    public void sort(int[] data) {
        new ShellSort().sort(data);
    }
},
QUICK() {
    public void sort(int[] data) {
        new QuickSort().sort(data);
    }
},
MERGE() {
    public void sort(int[] data) {
        new MergeSort().sort(data);
    }
},
HEAP() {
    public void sort(int[] data) {
        new HeapSort().sort(data);
    }
};

public abstract void sort(int[] data);
</code></pre>

<p>}
```</p>

<p>标签：<a href="/blog/categories/suan-fa/">算法</a></p>

<p>```java
/<em>*
 * 插入排序算法
 </em>/
class InsertSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    for (int i = 1; i &lt; data.length; i++) {
        for (int j = i; j &gt; 0 &amp;&amp; data[j] &lt; data[j - 1]; j--) {
            SortUtil.swap(data, j, j - 1);
        }
    }
}
</code></pre>

<p>}</p>

<p>/<em>*
 * 冒泡排序算法
 </em>/
class BubbleSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    for (int i = 0; i &lt; data.length; i++) {
        for (int j = data.length - 1; j &gt; i; j--) {
            if (data[j] &lt; data[j - 1]) {
                SortUtil.swap(data, j, j - 1);
            }
        }
    }
}
</code></pre>

<p>}</p>

<p>/<em>*
 * 选择排序算法
 </em>/
class SelectionSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    for (int i = 0; i &lt; data.length; i++) {
        int lowIndex = i;
        for (int j = data.length - 1; j &gt; i; j--) {
            if (data[j] &lt; data[lowIndex]) {
                lowIndex = j;
            }
        }
        SortUtil.swap(data, i, lowIndex);
    }
}
</code></pre>

<p>}</p>

<p>/<em>*
 * 希尔排序算法
 </em>/
class ShellSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    for (int i = data.length / 2; i &gt; 2; i /= 2) {
        for (int j = 0; j &lt; i; j++) {
            insertSort(data, j, i);
        }
    }
    insertSort(data, 0, 1);
}

private void insertSort(int[] data, int start, int inc) {
    for (int i = start + inc; i &lt; data.length; i += inc) {
        for (int j = i; j &gt;= inc &amp;&amp; data[j] &lt; data[j - inc]; j -= inc) {
            SortUtil.swap(data, j, j - inc);
        }
    }
}
</code></pre>

<p>}</p>

<p>/<em>*
 * 快速排序算法
 </em>/
class QuickSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    quickSort(data, 0, data.length - 1);
}

private void quickSort(int[] data, int left, int right) {
    if (left &gt;= right) { return; }

    int pivot = partition(data, left, right);
    quickSort(data, left, pivot);// 对左半段排序
    quickSort(data, pivot + 1, right);// 对右半段排序

}

private int partition(int[] data, int left, int right) {
    int pivot = data[left];
    while (left &lt; right) {
        while (left &lt; right &amp;&amp; data[right] &gt; pivot) {
            right--;
        }
        if (left &lt; right) {
            SortUtil.swap(data, left, right);
        }

        while (left &lt; right &amp;&amp; data[left] &lt; pivot) {
            left++;
        }
        if (left &lt; right) {
            SortUtil.swap(data, left, right);
        }
    }
    return left;
}
</code></pre>

<p>}</p>

<p>/<em>*
 * 归并排序算法
 </em>/
class MergeSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    int[] temp = new int[data.length];
    mergeSort(data, temp, 0, data.length - 1);
}

private void mergeSort(int[] data, int[] temp, int left, int right) {
    if (left == right) { return; }
    int mid = (left + right) / 2;
    mergeSort(data, temp, left, mid);
    mergeSort(data, temp, mid + 1, right);
    for (int i = left; i &lt;= right; i++) {
        temp = Arrays.copyOf(data, data.length);
    }
    int i1 = left;
    int i2 = mid + 1;
    for (int cur = left; cur &lt;= right; cur++) {
        if (i1 == mid + 1) {
            data[cur] = temp[i2++];
        } else if (i2 &gt; right) {
            data[cur] = temp[i1++];
        } else if (temp[i1] &lt; temp[i2]) {
            data[cur] = temp[i1++];
        } else {
            data[cur] = temp[i2++];
        }
    }
}
</code></pre>

<p>}</p>

<p>/<em>*
 * 堆排序算法
 </em>/
class HeapSort implements Sort {</p>

<pre><code>public void sort(int[] data) {
    MaxHeap h = new MaxHeap();
    h.init(data);
    for (int i : data) {
        h.remove();
    }
    System.arraycopy(h.queue, 1, data, 0, data.length);
}

private static class MaxHeap {
    void init(int[] data) {
        this.queue = new int[data.length + 1];
        for (int element : data) {
            queue[++size] = element;
            fixUp(size);
        }
    }

    private int size = 0;
    private int[] queue;

    public void remove() {
        SortUtil.swap(queue, 1, size--);
        fixDown(1);
    }

    // fixdown
    private void fixDown(int k) {
        int j;
        while ((j = k &lt;&lt; 1) &lt;= size) {
            if (j &lt; size &amp;&amp; queue[j] &lt; queue[j + 1]) {
                j++;
            }
            if (queue[k] &gt; queue[j]) { // 不用交换
                break;
            }
            SortUtil.swap(queue, j, k);
            k = j;
        }
    }

    private void fixUp(int k) {
        while (k &gt; 1) {
            int j = k &gt;&gt; 1;
        if (queue[j] &gt; queue[k]) {
            break;
        }
        SortUtil.swap(queue, j, k);
        k = j;
        }
    }

}
</code></pre>

<p>}
```</p>

<p>```java
/<em>*
 * 排序算法工具类
 </em>/
class SortUtil {</p>

<pre><code>public static void swap(int[] data, int i, int j) {
    int temp = data[i];
    data[i] = data[j];
    data[j] = temp;
}

public static void print(int[] data) {
    for (int each : data) {
        System.out.print(each + " ");
    }
    System.out.println();
}
</code></pre>

<p>}</p>

<p>```</p>

<p>```java
/<em>*
 * 冒择入希快归堆：常用排序算法
 * @author wangchaoqun
 </em>/
public class SortTest {</p>

<pre><code>public static void main(String[] args) {
    int[] origin = { 2, 17, 3, 1, 10, 4, 8, 5, 21, 6, 33, 9, 53 };
    System.out.print("origin:   ");
    SortUtil.print(origin);
    // 执行排序算法
    for (Sorts each : Sorts.values()) {
        System.out.print(each.name() + ":   ");
        int[] data = Arrays.copyOf(origin, origin.length);
        each.sort(data);
        SortUtil.print(data);
    }
    // api使用经过调优的快速排序
    Arrays.sort(origin);
    System.out.print("jdkApi:   ");
    SortUtil.print(origin);
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
