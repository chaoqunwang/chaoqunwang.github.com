<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: aggregation | 超群的博客]]></title>
  <link href="http://wangchaoqun.com/tags/aggregation/atom.xml" rel="self"/>
  <link href="http://wangchaoqun.com/"/>
  <updated>2014-03-17T07:41:37+08:00</updated>
  <id>http://wangchaoqun.com/</id>
  <author>
    <name><![CDATA[wang chaoqun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mongodb aggregation framework总结]]></title>
    <link href="http://wangchaoqun.com/blog/2013/05/mongodb-aggregation-framework-zong-jie.html/"/>
    <updated>2013-05-18T12:56:21+08:00</updated>
    <id>http://wangchaoqun.com/blog/2013/05/mongodb-aggregation-framework-zong-jie</id>
    <content type="html"><![CDATA[<p>2.2版本新特性，比group, map-reduce好，reference里有很多操作和[运算]可用<br/>
pipeline operators:<br/>
• $project (page 285)<br/>
• $match (page 281)<br/>
• $limit (page 280)<br/>
• $skip (page 287)<br/>
• $unwind (page 290)// 用于嵌套文档，可对数组拆解<br/>
• $group (page 278)<br/>
• $sort (page 287)<br/>
• $geoNear (page 276)</p>

<!--more-->


<p>和SQL的对应关系：<br/>
WHERE $match (page 281)<br/>
GROUP BY $group (page 278)<br/>
HAVING $match (page 281)<br/>
SELECT $project (page 285)<br/>
ORDER BY $sort (page 287)<br/>
LIMIT $limit (page 280)<br/>
SUM() $sum<br/>
COUNT() $sum<br/>
join No direct corresponding operator; however, the $unwind (page 290) operator allows for
somewhat similar functionality, but with fields embedded within the document.</p>

<p>场景: 比如按省份城市统计发帖数目，比如按人统计发帖排名：<br/>
``` javascript
db.topic.aggregate(
{ $match: { createtime : { $gt:1370000000000 } } },
{ $group : {</p>

<pre><code>_id : { id:"$creatorId", name:"$creator" },
upCount : {$sum : "$upCount"},
downCount : {$sum : "$downCount"}
}},
</code></pre>

<p>{ $project : {</p>

<pre><code>_id : 0,
name : "$_id.name",
total : { $add : ["$upCount", "$downCount"]}
}},
</code></pre>

<p>{ $sort: { total : -1 } },
{ $skip: 0 },
{ $limit: 3 }
);
{</p>

<pre><code>"result" : [
    {
            "name" : "俞章数",
            "total" : 108
    },
    {
            "name" : "马晴",
            "total" : 87
    },
    {
            "name" : "苏妙玲",
            "total" : 58
    }
],
"ok" : 1
</code></pre>

<p>}
<code>
标签：[mongodb](/blog/categories/mongodb)  
java driver 官方示例：  
</code> java
// create our pipeline operations, first with the $match
DBObject match = new BasicDBObject(&ldquo;$match&rdquo;, new BasicDBObject(&ldquo;type&rdquo;, &ldquo;airfare&rdquo;) );</p>

<p>// build the $projection operation
DBObject fields = new BasicDBObject(&ldquo;department&rdquo;, 1);
fields.put(&ldquo;amount&rdquo;, 1);
fields.put(&ldquo;_id&rdquo;, 0);
DBObject project = new BasicDBObject(&ldquo;$project&rdquo;, fields );</p>

<p>// Now the $group operation
DBObject groupFields = new BasicDBObject( &ldquo;_id&rdquo;, &ldquo;$department&rdquo;);
groupFields.put(&ldquo;average&rdquo;, new BasicDBObject( &ldquo;$avg&rdquo;, &ldquo;$amount&rdquo;));
DBObject group = new BasicDBObject(&ldquo;$group&rdquo;, groupFields);</p>

<p>// run aggregation
AggregationOutput output = collection.aggregate( match, project, group );
```</p>

<p>spring data mongodb，@since 1.3，注意升级<br/>
官方例子是对城市人口做统计，group两次（对第一次group的结果再group）<br/>
好处在于对结果进行了封装，返回List，注意ZipInfoStats嵌套City，使用nested和bind:<br/>
``` java
class ZipInfo {</p>

<pre><code>String id;
String city;
String state;
@Field("pop") int population;
@Field("loc") double[] location;
</code></pre>

<p>}
class City {</p>

<pre><code>String name;
int population;
</code></pre>

<p>}
class ZipInfoStats {</p>

<pre><code>String id;
String state;
City biggestCity;
City smallestCity;
</code></pre>

<p>}</p>

<p>import static org.springframework.data.mongodb.core.aggregation.Aggregation.*;
TypedAggregation<ZipInfo> aggregation = newAggregation(ZipInfo.class,</p>

<pre><code>group("state", "city")
    .sum("population").as("pop"),
sort(ASC, "pop", "state", "city"),
group("state")
    .last("city").as("biggestCity")
    .last("pop").as("biggestPop")
    .first("city").as("smallestCity")
    .first("pop").as("smallestPop"),
project()
    .and("state").previousOperation()
    .and("biggestCity")
    .nested(bind("name", "biggestCity").and("population", "biggestPop"))
    .and("smallestCity")
    .nested(bind("name", "smallestCity").and("population", "smallestPop")),
sort(ASC, "state")
</code></pre>

<p>);
AggregationResults<ZipInfoStats> result = mongoTemplate.aggregate(aggregation, ZipInfoStats.class);
ZipInfoStats firstZipInfoStats = result.getMappedResults().get(0);
```</p>

<p>对应的shell即是：<br/>
``` javascript
db.zipcodes.aggregate(
{ $group:</p>

<pre><code>{   _id: { state: "$state", city: "$city" },
    pop: { $sum: "$pop" } } 
</code></pre>

<p>},
{ $sort: { pop: 1 } },
{ $group:</p>

<pre><code>{   _id : "$_id.state",
    biggestCity: { $last: "$_id.city" },
    biggestPop: { $last: "$pop" },
    smallestCity: { $first: "$_id.city" },
    smallestPop: { $first: "$pop" } } 
</code></pre>

<p>},
// the following $project is optional, and
// modifies the output format.
{ $project:</p>

<pre><code>{   _id: 0,
    state: "$_id",
    biggestCity: { name: "$biggestCity", pop: "$biggestPop" },
    smallestCity: { name: "$smallestCity", pop: "$smallestPop" } } 
</code></pre>

<p>} )
```</p>
]]></content>
  </entry>
  
</feed>
