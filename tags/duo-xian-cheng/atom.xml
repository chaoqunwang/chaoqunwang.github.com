<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 多线程 | 超群的博客]]></title>
  <link href="http://wangchaoqun.com/tags/duo-xian-cheng/atom.xml" rel="self"/>
  <link href="http://wangchaoqun.com/"/>
  <updated>2014-04-16T17:05:27+08:00</updated>
  <id>http://wangchaoqun.com/</id>
  <author>
    <name><![CDATA[wang chaoqun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[多线程Synchronized同步总结]]></title>
    <link href="http://wangchaoqun.com/blog/2011/03/duo-xian-cheng-synchronized-tong-bu-zong-jie.html/"/>
    <updated>2011-03-17T11:03:31+08:00</updated>
    <id>http://wangchaoqun.com/blog/2011/03/duo-xian-cheng-synchronized-tong-bu-zong-jie</id>
    <content type="html"><![CDATA[<p>synchronized 关键字，代表这个方法加锁，相当于不管哪一个线程（例如线程A），运行到这个方法时，都要检查有没有其它线程B（或者C、 D等）正在用这个方法，有的话要等正在使用synchronized方法的线程B（或者C 、D）运行完这个方法后再运行此线程A；没有的话，直接运行。<br/>
它可以用来同步方法，代码块；可以用在方法声明（静态方法、非静态方法），也可以传参；
对象锁需要注意是否会造成一个方法执行，其他方法也要等待的情况（将整个对象都上锁，而不允许其他线程短暂地使用对象中其他同步方法来访问共享资源），所以要注意锁的不同   <!--more--></p>

<p>1、同步的静态方法，影响类内<br/>
```java
public static synchronized void method() {</p>

<pre><code>...
</code></pre>

<p>}
等同于
public static void method() {</p>

<pre><code>synchronized(ThisClazz.class){
    ...
}
</code></pre>

<p>}
或者
private static final String lock = &ldquo;&rdquo;;
public static void method() {</p>

<pre><code>synchronized(lock){
    ...
}
</code></pre>

<p>}
```</p>

<p>2、同步的非静态方法，影响实例内<br/>
```java
public synchronized void method() {</p>

<pre><code>...
</code></pre>

<p>}
等同于
public void method() {</p>

<pre><code>synchronized(this){
    ...
}
</code></pre>

<p>}
或者
private String lock = new String(&ldquo;&rdquo;);
public void method() {</p>

<pre><code>synchronized(lock){
    ...
}
</code></pre>

<p>}
<code>
标签：[多线程](/blog/categories/duo-xian-cheng/)  
测试示例：  
</code>java
public class SynThreadTest extends Thread {</p>

<pre><code>public String methodName;
private String sync1 = "111";// 不同于 new String("");
private static String sync2 = "222";
private String sync3 = "" + new Random().nextInt(1000);

public static void method(String s) {
    System.out.println(s);
    while (true) {
        ;
    }
}

public synchronized void method1() {
    method("syn非静态的method1方法，实例内非静态syn方法互斥");
}

public synchronized void method2() {
    method("syn非静态的method2方法，实例内非静态syn方法互斥");
}

public static synchronized void method3() {
    method("syn静态的method3方法，类级别静态syn方法互斥");
}

public static synchronized void method4() {
    method("syn静态的method4方法，类级别静态syn方法互斥");
}

public void method5() {
    method("---非静态的method5方法，非syn无锁");
}

public static void method6() {
    method("---静态的method6方法，非syn无锁");
}

public static void method7() {
    synchronized (sync2) {
        method("method7方法，类级别静态相同syn obj互斥");
    }
}

public void method8() {
    synchronized (this + "123") {
        method("method8方法，不同实例不同syn obj");
    }
}

public void method9() {
    synchronized (sync1) {
        method("非静态的method9方法，不同实例相同syn obj");
    }
}

public void method10() {
    synchronized (sync3) {
        method("method10方法，不同实例不同syn obj");
    }
}

public void run() {
    try {
        getClass().getMethod(methodName).invoke(this);
    } catch (Exception e) {}
}

public static void main(String[] args) throws Exception {
    SynThreadTest t1 = new SynThreadTest();
    for (int i = 1; i &lt;= 10; i++) {
        t1.methodName = "method" + String.valueOf(i);
        new Thread(t1).start();
        sleep(100);
    }
    System.out.println();
    SynThreadTest t2 = new SynThreadTest();
    for (int i = 1; i &lt;= 10; i++) {
        t2.methodName = "method" + String.valueOf(i);
        new Thread(t2).start();
        sleep(100);
    }
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
