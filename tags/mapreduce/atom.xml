<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: mapreduce | 超群的博客]]></title>
  <link href="http://wangchaoqun.com/tags/mapreduce/atom.xml" rel="self"/>
  <link href="http://wangchaoqun.com/"/>
  <updated>2014-03-07T11:51:38+08:00</updated>
  <id>http://wangchaoqun.com/</id>
  <author>
    <name><![CDATA[wang chaoqun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MongoDB常用命令和操作总结2]]></title>
    <link href="http://wangchaoqun.com/blog/2013/05/mongodb-chang-yong-ming-ling-he-cao-zuo-zong-jie-2.html/"/>
    <updated>2013-05-10T10:09:23+08:00</updated>
    <id>http://wangchaoqun.com/blog/2013/05/mongodb-chang-yong-ming-ling-he-cao-zuo-zong-jie-2</id>
    <content type="html"><![CDATA[<p>做个总结，涉及到mongodb的常用命令、java driver查询、spring data mongodb的使用，group，map-reduce，aggregation framework等</p>

<h3>group</h3>

<p>topic : reply = one to many，按topic(或发布者)分组统计回复数
shell:
```</p>

<blockquote><p>db.reply.group({ &ldquo;key&rdquo; : { &ldquo;topic&rdquo; : 1} , &ldquo;$reduce&rdquo; : &ldquo;function(doc, prev) {
 prev.total += 1; }&rdquo; , &ldquo;initial&rdquo; : {&ldquo;total&rdquo; : 0}})
```</p></blockquote>

<!--more-->


<p>spring-data-mongodb:
``` java
Criteria cri = Criteria.where(&ldquo;createtime&rdquo;).gt(1380000000000L);// 时间条件
GroupBy groupBy = GroupBy</p>

<pre><code>    .key("topic").initialDocument("{total: 0 }")
    .reduceFunction("function(doc, prev) { prev.total += 1; }");
</code></pre>

<p>String collection = mongoTemplate.getCollectionName(Reply.class);
GroupByResults<Reply> replys = mongoTemplate.group(cri, collection, groupBy, Reply.class);
```</p>

<p>另一个例子：统计提问的回复（有内容的和简单赞踩），按权重计算热度
``` java
String reduceFunction = &ldquo;function(doc, out) { if (doc.content) { out.contentCount += 1;} &rdquo;</p>

<pre><code>    + "else { out.simpleCount += 1; }; out.topic = doc.topic}";
</code></pre>

<p>String finalizeFunction = &ldquo;function(out) { out.rankScore = out.simpleCount * &rdquo; + ratio</p>

<pre><code>    + " + out.contentCount * (" + (10 - ratio) + ") } ";
</code></pre>

<p>GroupBy groupBy = GroupBy</p>

<pre><code>    .keyFunction("function(doc) { return { topic: doc.topic }; }")
    .initialDocument("{contentCount: 0, simpleCount: 0 }")
    .reduceFunction(reduceFunction).finalizeFunction(finalizeFunction);
</code></pre>

<p>```</p>

<p>java driver:
<code>java
public GroupCommand(DBCollection inputCollection, DBObject keys, DBObject condition, DBObject initial, String reduce, String finalize)
DBCollection collection = mongoTemplate.getCollection("reply");
collection.group(...);
</code></p>

<h3>map-reduce</h3>

<p>场景：展示发帖或回帖的时间趋势图，或者说按整点显示此小时内的发帖数和回帖数，展示成折线图
创建时间保存的是number long，即date.getTime()的值，key要转成小时，使用new Date(y,m,d,h,0,0,0)<br/>
标签：<a href="/blog/categories/mongodb">mongodb</a><br/>
spring-data-mongodb:
``` java
String mapFunction = &ldquo;function () { var key=new Date(new Date(this.createtime).getFullYear(),&rdquo;</p>

<pre><code>    + "new Date(this.createtime).getMonth(), new Date(this.createtime).getDate(),"
    + "new Date(this.createtime).getHours(), 0, 0, 0).getTime(); "
    + "emit( key, { hour:key, count:1 } ); }";
</code></pre>

<p>String reduceFunction = &ldquo;function (key, values) { &rdquo;</p>

<pre><code>    + " var total = 0;" 
    + " for (var i=0; i&lt;values.length; i++) { "
    + "     total += values[i].count; "
    + " }" 
    + " return { hour:key, count:total }; "
    + "}";
</code></pre>

<p>MapReduceResults<Reply> results = mongoTemplate.mapReduce(</p>

<pre><code>    new Query(cri), collectionName, mapFunction,
    reduceFunction, Reply.class);
</code></pre>

<p>List<Reply> replys = Lists.newArrayList(results);
for (Replys reply : replys) {</p>

<pre><code>ReplyStat value = reply.getValue();
System.out.println(value.getHour() + " : " + value.getCount());
</code></pre>

<p>}
```</p>

<p>需要注意的是：结果存在reply的value字段里，是为了后面构造map好处理；场景不一样的话，先使用shell看看结果
``` java
private ReplyStat value;
class ReplyStat {</p>

<pre><code>private Long hour;
private Long count;
</code></pre>

<p>```</p>

<p>shell:
``` javascript
db.runCommand({ mapreduce: &ldquo;reply&rdquo;,
 map : function Map() {</p>

<pre><code>var key=new Date(new Date(this.createtime).getFullYear(), 
    new Date(this.createtime).getMonth(), 
    new Date(this.createtime).getDate(),
    new Date(this.createtime).getHours(), 0, 0, 0).getTime(); 
emit( key, { hour:key, count:1 } );
</code></pre>

<p>},
 reduce : function Reduce(key, values) {</p>

<pre><code>var total = 0;  
for (var i=0; i&lt;values.length; i++) {
    total += values[i].count;   
}   
return { hour:key, count:total };
</code></pre>

<p>},
 finalize : function Finalize(key, reduced) {</p>

<pre><code>return reduced;
</code></pre>

<p>},
 query : { &ldquo;type&rdquo; : 1, &ldquo;$and&rdquo; : [</p>

<pre><code>{ "createtime" : { "$gt" : NumberLong("1370000000000") } }, 
{ "createtime" : { "$lt" : NumberLong("1380000000000") } }] 
</code></pre>

<p>},
 out : { inline : 1 }
});
```</p>

<p>======result======
``` javascript
{</p>

<pre><code>    "results" : [
            {
                    "_id" : 1376881200000,
                    "value" : {
                            "hour" : 1376881200000,
                            "count" : 2
                    }
            },
            {
                    "_id" : 1376884800000,
                    "value" : {
                            "hour" : 1376884800000,
                            "count" : 5
                    }
            },
            ...
            {
                    "_id" : 1379404800000,
                    "value" : {
                            "hour" : 1379404800000,
                            "count" : 27
                    }
            }
    ],
    "timeMillis" : 24,
    "counts" : {
            "input" : 263,
            "emit" : 263,
            "reduce" : 35,
            "output" : 43
    },
    "ok" : 1
</code></pre>

<p>}
```</p>

<p>如果emit修改成
<code>
emit( key, {count:1} );
</code>
reduce里
<code>
return {count:total};
</code>
结果就会是：
``` javascript
{</p>

<pre><code>    "results" : [
            {
                    "_id" : 1376881200000,
                    "value" : {
                            "count" : 2
                    }
            },
            {
                    "_id" : 1376884800000,
                    "value" : {
                            "count" : 5
                    }
            },
            {
                    "_id" : 1376888400000,
                    "value" : {
                            "count" : 8
                    }
            }
    ],
    "timeMillis" : 22,
    "counts" : {
            "input" : 263,
            "emit" : 263,
            "reduce" : 35,
            "output" : 43
    },
    "ok" : 1
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB常用命令和操作总结1]]></title>
    <link href="http://wangchaoqun.com/blog/2013/05/mongodb-chang-yong-ming-ling-he-cao-zuo-zong-jie-1.html/"/>
    <updated>2013-05-09T16:29:59+08:00</updated>
    <id>http://wangchaoqun.com/blog/2013/05/mongodb-chang-yong-ming-ling-he-cao-zuo-zong-jie-1</id>
    <content type="html"><![CDATA[<p>做个总结，涉及到mongodb的常用命令、java driver查询、spring data mongodb的使用，group，map-reduce，aggregation framework等</p>

<h3>关闭服务</h3>

<p><code>
use admin
db.shutdownServer()
</code></p>

<h3>加锁</h3>

<p><code>
use admin
db.runCommand({"fsync":1,"lock":1})
</code><!--more--></p>

<h3>解锁</h3>

<p><code>
use admin
db.$cmd.sys.unlock.findOne()
db.currentOp()    
{"inprog":[]}
</code></p>

<h3>导出和导入</h3>

<p><code>
mongodump -h 192.168.0.100:27017 -d mydb -o B:\mongo\dump
mongorestore -h 127.0.0.1:27017 --directoryperdb B:\mongo\dump
</code></p>

<h3>用户</h3>

<p><code>
use admin
db.addUser('name','pwd')
db.system.users.find()
db.auth('name','pwd')
db.removeUser('name')
</code></p>

<h3>数据库</h3>

<p><code>
db.copyDatabase('projectDB1', 'projectDB2')
db.projectDB1.drop()
db.dropDatabase()
</code></p>

<h3>增删改</h3>

<p><code>
db.mycollection.inser,save,update...
</code></p>

<h3>索引</h3>

<p><code>
db.user.ensureIndex({firstname: 1, lastname: 1}, {unique: true});
db.user.dropIndex('address.post_1')
</code></p>

<h3>查询</h3>

<p><code>
db.mycollection.find,findOne,distinct.sort({'createTime',-1}).skip(3).limit(10)
db.user.insert({"name":"cq","age":28,"address":{"province":100,"city":101}})
db.user.find({"_id":ObjectId("52f830f3aab82981150db455")})
db.user.find({"address":{"province":100,"city":101}})  # one record
db.user.find({"address":{"city":101,"province":100}})  # nothing
db.user.find({"address.city":101,"address.province":100})  # one record
</code>
注意：key的顺序,因为MongoDB使用BSON的二进制数据格式<br/>
注意：limit的值例如为-5的话等同于5，为0则返回全部，汗<br/>
标签：<a href="/blog/categories/tech">技术</a><br/>
<code>
db.user.find({creationTime:{$gt:1300000000000, $lte:1310000000000});
</code>
$elemMatch:前2个不对，匹配数组查询要用第3个<br/>
<code>
db.blog.find({"comments.name": "foo", "comments.content": "bar"});
db.blog.find({"comments": {"name": "foo", "content": "bar"}});
db.blog.find({"comments":{"$elemMatch":{"name":"joke", "content":"bad good ugly"}}});
</code>
使用where可做运算<br/>
<code>
db.reply.find({$where: "this.upCount+this.downCount&lt;1"});
db.reply.find("this.upCount+this.downCount&lt;1");
</code></p>

<h3>返回和排除字段</h3>

<p><code>
db.user.find({"name":"cq"}, {age:1, address:0});
count
db.topic.find().skip(10).limit(5).count(); # 所有的记录数量
</code><br/>
要返回限制的记录数量，要使用count(true)或count(非0)
<code>
db.topic.find().skip(10).limit(5).count(true);
</code></p>

<h3>dbref关联</h3>

<p>多查一<br/>
``` javascript</p>

<blockquote><p>db.reply.findOne({creator:&ldquo;wy&rdquo;}, {creator:1,topic:1})
{</p>

<pre><code>    "_id" : ObjectId("52d3ae720b6316a72bb31c45"),
    "creator" : "wy",
    "topic" : DBRef("topic", ObjectId("52cf620a0b6307f6a0d44450"))
</code></pre>

<p>}
db.reply.findOne({creator:&ldquo;wy&rdquo;}).topic
DBRef(&ldquo;topic&rdquo;, ObjectId(&ldquo;52cf620a0b6307f6a0d44450&rdquo;))
db.reply.findOne({creator:&ldquo;wy&rdquo;}).topic.fetch()
{</p>

<pre><code>    "_id" : ObjectId("52cf620a0b6307f6a0d44450"),
    "content" : "xxx",
    "createtime" : NumberLong("1389322762932"),
    "creator" : "zzz"
    ...
</code></pre>

<p>}
```</p></blockquote>

<p>一查多<br/>
``` javascript</p>

<blockquote><p>topic=db.reply.findOne({creator:&ldquo;wy&rdquo;}).topic
DBRef(&ldquo;topic&rdquo;, ObjectId(&ldquo;52cf620a0b6307f6a0d44450&rdquo;))
db.reply.find({&ldquo;topic&rdquo;:topic}).count()
2
topic=db.reply.findOne({creator:&ldquo;wy&rdquo;}).topic
DBRef(&ldquo;topic&rdquo;, ObjectId(&ldquo;52cf620a0b6307f6a0d44450&rdquo;))
db.reply.find({&ldquo;topic.$id&rdquo;:topic.$id}).count()
2
topic=db.reply.findOne({creator:&ldquo;wy&rdquo;}).topic.fetch()
{</p>

<pre><code>    "_id" : ObjectId("52cf620a0b6307f6a0d44450"),
    "content" : "xxx",
    "createtime" : NumberLong("1389322762932"),
    "creator" : "zzz"
    ...
</code></pre>

<p>}
db.reply.find({&ldquo;topic.$id&rdquo;:topic._id}).count()
2
```</p>

<h4>spring data mongodb</h4>

<p>``` java
Criteria cri = Criteria.where(&ldquo;topic.$id&rdquo;).is(new ObjectId(&ldquo;52d8f8950b6316a72bb31c7c&rdquo;));
Reply reply = mongoTemplate.findOne(Query.query(cri), Reply.class);</p></blockquote>

<p>cri.andOperator(Criteria.where(&ldquo;passedtime&rdquo;).gt(fromTime), Criteria.where(&ldquo;passedtime&rdquo;).lt(toTime));
// 错误的：Criteria.where(&ldquo;passedtime&rdquo;).gt(fromTime).and(&ldquo;passedtime&rdquo;).lt(toTime)
```</p>

<h4>java driver 可以这样：</h4>

<p>``` java
String total = &ldquo;this.upCount+this.downCount &lt; &rdquo; + minCount;
BasicDBObject query = new BasicDBObject(&ldquo;$where&rdquo;, total);
query.append(&ldquo;passedtime&rdquo;, new BasicDBObject(&ldquo;$gt&rdquo;, fromTime).append(&ldquo;$lt&rdquo;, toTime));
// TODO query.append(other conditions);</p>

<p>// 返回字段
BasicDBObject keys = new BasicDBObject();
keys.put(&ldquo;_id&rdquo;, 1);
keys.put(&ldquo;creator&rdquo;, 1);</p>

<p>MongoClient mongoClient = new MongoClient(new ServerAddress(&ldquo;localhost&rdquo;, 27017));
DB db = mongo.getDB(&ldquo;mydb&rdquo;);
DBCollection collection = db.getCollection(&ldquo;test&rdquo;);</p>

<p>long count = collection.count(query);
DBCursor cursor = collection.find(query, keys).limit(size);
for (int i = 0; i &lt; size; i++) {</p>

<pre><code>DBObject e = cursor.next();
String topicId = e.get("_id").toString();
// TODO
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
